{"version":3,"sources":["./src/app/shared/Service/calendar.service.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;AAA2C;AACN;AACM;AAEI;IAKlC,eAAe,SAAf,eAAe;IAE1B,YAAoB,UAAwB;QAAxB,eAAU,GAAV,UAAU,CAAc;QADpC,YAAO,GAAG,IAAI,yCAAO,EAAO,CAAC;IACW,CAAC;IAEjD,SAAS,CAAC,GAAG;QACX,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE,KAAK,EAAE,GAAG,EAAE,CAAC,CAAC;IACpC,CAAC;IAED,QAAQ;QACN,OAAO,IAAI,CAAC,OAAO,CAAC,YAAY,EAAE,CAAC;IACrC,CAAC;IAED,iBAAiB,CAAC,EAAE;QAClB,OAAO,IAAI,CAAC,UAAU;aACnB,GAAG,CAAC,GAAG,oEAAwB,EAAE,CAAC;aAClC,IAAI,CAAC,mDAAG,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;IACvC,CAAC;IACD,aAAa,CAAC,EAAE;QACd,OAAO,IAAI,CAAC,UAAU;aACnB,GAAG,CAAC,GAAG,oEAAwB,cAAc,EAAE,eAAe,CAAC;aAC/D,IAAI,CAAC,mDAAG,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;IACvC,CAAC;IACD,YAAY;QACV,IAAI,KAAK,GAAG,OAAO,CAAC;QACpB,OAAO,IAAI,CAAC,UAAU;aACnB,GAAG,CAAC,GAAG,oEAAwB,SAAS,KAAK,EAAE,CAAC;aAChD,IAAI,CAAC,mDAAG,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;IACvC,CAAC;IACD,WAAW,CAAC,QAAQ;QAClB,OAAO,IAAI,CAAC,UAAU;aACnB,IAAI,CAAC,GAAG,oEAAwB,EAAE,EAAE,QAAQ,CAAC;aAC7C,IAAI,CAAC,mDAAG,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC;IAC7B,CAAC;IAED,WAAW,CAAC,KAAK;QACf,OAAO,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,GAAG,oEAAwB,GAAG,KAAK,CAAC,GAAG,EAAE,EAAE,KAAK,CAAC,CAAC;IAC/E,CAAC;IAED,WAAW,CAAC,EAAO;QACjB,OAAO,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,GAAG,oEAAwB,EAAE,GAAG,EAAE,CAAC,CAAC;IACpE,CAAC;IACD,YAAY,CAAC,EAAE;QACb,OAAO,IAAI,CAAC,UAAU;aACnB,GAAG,CAAC,GAAG,oEAAwB,GAAG,EAAE,EAAE,CAAC;aACvC,IAAI,CAAC,mDAAG,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;IACvC,CAAC;IACD,gBAAgB,CAAC,KAAK;QACpB,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;QACnB,OAAO,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,GAAG,oEAAwB,OAAO,EAAE,KAAK,CAAC,CAAC;IACxE,CAAC;CACF;;YAvDQ,wDAAY;;AAKR,eAAe;IAH3B,yDAAU,CAAC;QACV,UAAU,EAAE,MAAM;KACnB,CAAC;GACW,eAAe,CAkD3B;AAlD2B","file":"src_app_shared_Service_calendar_service_ts.js","sourcesContent":["import { Injectable } from '@angular/core';\nimport { map } from 'rxjs/operators';\nimport { Observable, Subject } from 'rxjs';\nimport { Activity } from '../Model/Activity';\nimport { UtilsService } from './utils.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class CalendarService {\n  private subject = new Subject<any>();\n  constructor(private apiService: UtilsService) { }\n\n  sendEvent(evt) {\n    this.subject.next({ event: evt });\n  }\n\n  getEvent(): Observable<any> {\n    return this.subject.asObservable();\n  }\n\n  getActivitiesbyID(id): Observable<Activity[]> {\n    return this.apiService\n      .get(`${UtilsService.apiCalendar}`)\n      .pipe(map((res) => res.data.data));\n  }\n  getEventsbyID(id): Observable<Activity[]> {\n    return this.apiService\n      .get(`${UtilsService.apiCalendar}?createdBy=${id}&type='event'`)\n      .pipe(map((res) => res.data.data));\n  }\n  getAllEvents(): Observable<Activity[]> {\n    let event = 'event';\n    return this.apiService\n      .get(`${UtilsService.apiCalendar}?type=${event}`)\n      .pipe(map((res) => res.data.data));\n  }\n  addActivity(activity): Observable<Activity> {\n    return this.apiService\n      .post(`${UtilsService.apiCalendar}`, activity)\n      .pipe(map((res) => res));\n  }\n\n  updateEvent(event) {\n    return this.apiService.put(`${UtilsService.apiCalendar}${event._id}`, event);\n  }\n\n  deleteEvent(id: any) {\n    return this.apiService.delete(`${UtilsService.apiCalendar}` + id);\n  }\n  getEventbyID(id): Observable<Activity[]> {\n    return this.apiService\n      .get(`${UtilsService.apiCalendar}${id}`)\n      .pipe(map((res) => res.data.data));\n  }\n  updateCoverEvent(event) {\n    console.log(event);\n    return this.apiService.put(`${UtilsService.apiCalendar}cover`, event);\n  }\n}\n"],"sourceRoot":"webpack:///"}