{"version":3,"sources":["./src/app/shared/Service/notifications.service.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;AAA2C;AAEI;AACE;IAKpC,oBAAoB,SAApB,oBAAoB;IAE/B,YAAoB,UAAwB;QAAxB,eAAU,GAAV,UAAU,CAAc;IAAI,CAAC;IAEjD,mBAAmB,CAAC,EAAE;QACpB,OAAO,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,GAAG,iEAAqB,GAAG,EAAE,EAAE,CAAC,CAAC,IAAI,CAAC,mDAAG,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;IAChG,CAAC;IACD,gBAAgB,CAAC,KAAK;QACpB,OAAO,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,GAAG,iEAAqB,EAAE,EAAE,KAAK,CAAC,CAAC,IAAI,CAAC,mDAAG,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;IACpG,CAAC;IACD,kBAAkB,CAAE,MAAM;QACxB,OAAO,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,GAAG,iEAAqB,EAAE,EAAE,MAAM,CAAE,CAAC,IAAI,CAAC,mDAAG,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;IACrG,CAAC;IACD,iBAAiB,CAAC,QAAQ,EAAE,SAAS;QACnC,OAAO,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,GAAG,iEAAqB,GAAG,QAAQ,IAAI,SAAS,EAAE,CAAC,CAAC,IAAI,CAAC,mDAAG,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC;IAC9G,CAAC;IACD,WAAW,CAAC,EAAE;QACZ,OAAO,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,GAAG,iEAAqB,GAAG,EAAE,EAAE,CAAC,CAAC,IAAI,CAAC,mDAAG,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;IACnG,CAAC;CACF;;YAzBQ,wDAAY;;AAMR,oBAAoB;IAHhC,yDAAU,CAAC;QACV,UAAU,EAAE,MAAM;KACnB,CAAC;GACW,oBAAoB,CAmBhC;AAnBgC","file":"src_app_shared_Service_notifications_service_ts-_804a1.js","sourcesContent":["import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { UtilsService } from './utils.service';\nimport { map, catchError } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class NotificationsService {\n\n  constructor(private apiService: UtilsService) { }\n\n  getAllNotifications(id): Observable<any> {\n    return this.apiService.get(`${UtilsService.apiNotif}${id}`).pipe(map((res) => res.data.data));\n  }\n  postNotification(notif): Observable<any> {\n    return this.apiService.patch(`${UtilsService.apiNotif}`, notif).pipe(map((res) => res.data.data));\n  }\n  updateNotification( notifs): Observable<any> {\n    return this.apiService.post(`${UtilsService.apiNotif}`, notifs ).pipe(map((res) => res.data.data));\n  }\n  checkNotification(reciever, userOwner): Observable<any> {\n    return this.apiService.get(`${UtilsService.apiNotif}${reciever}/${userOwner}`).pipe(map((res) => res.data));\n  }\n  deleteNotif(id): Observable<any> {\n    return this.apiService.delete(`${UtilsService.apiNotif}${id}`).pipe(map((res) => res.data.data));\n  }\n}\n"],"sourceRoot":"webpack:///"}